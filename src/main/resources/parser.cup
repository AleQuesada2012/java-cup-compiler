package main.java;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import main.java.SymbolTable;
import main.java.MIPS;


parser code {:
    private LexerCupV lex;
    private SymbolTable symTable;
    private BufferedWriter errorOutputFile;
    private BufferedWriter symTableOutFile;
    private BufferedWriter semanticOutFile;
    private MIPS mipsGenerator;


    public Parser(LexerCupV lexer, BufferedWriter output, BufferedWriter symTableOut, BufferedWriter semanticOut, MIPS mipsGenerator) {
        this.lex = lexer;
        this.errorOutputFile = output;
        this.symTableOutFile = symTableOut;
        this.symTable = new SymbolTable(this.symTableOutFile);
        this.semanticOutFile = semanticOut;
        this.mipsGenerator = mipsGenerator;
    }



    @Override
        /**
        * método para reportar de manera personalizada errores sintácticos al parsear el código fuente
        */
        public void report_error(String message, Object info) {
                    // al sobreescribir este método, lo que conseguimos es que el syntax_error del Parser llame este que estamos
                    // escribiendo y no el que existe por defecto
                    String error = "Error encontrado: " + message;
                    if (info instanceof Symbol) {
                        Symbol symbol = (Symbol) info;
                        error += " en la línea: " + (symbol.left) + ", columna: " + (symbol.right);
                        // se les suma uno porque se almacena iniciando en 0, pero en los archivos siempre lo leemos de 1 en adelante
                    }
                try {
                    this.errorOutputFile.write(error);
                    this.errorOutputFile.newLine();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                // System.err.println(error);
                }


        public void writeSemanticError(String text) throws IOException {
                if(semanticOutFile != null) {
                    semanticOutFile.write(text + "\n");
                    semanticOutFile.flush();
                }
            }
:};

scan with {:
    Symbol token = lex.next_token();
    if (token.sym == sym.EOF) {
            return token;
        }
    System.out.println("Parseando token: " + token.sym + " (" + (token.sym >=0 ? sym.terminalNames[token.sym]: "ERROR") + ")"
    + " [Fila: " + token.left + ", Columna: " + token.right + "]");
    return token;
:};


// Tokens
terminal MAIN, INTEGER, FLOAT, BOOL, CHAR, STRING;
terminal LITERAL_INT, LITERAL_FLOAT, LITERAL_BOOL, LITERAL_CHAR, LITERAL_STRING;
terminal OPEN_BLOCK, CLOSE_BLOCK, END_EXPRESSION, SEPARATOR;
terminal OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
terminal ASSIGN, ADD, SUBSTRACTION, MULTIPLICATION, DIVISION, MODULO, POWER, INCREMENT, DECREMENT;
terminal LESSER, LESSER_EQUAL, GREATER, GREATER_EQUAL, EQUALS, DIFFERENT;
terminal CONJUNCTION, DISJUNCTION, NEGATION;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, COLON;
terminal PRINT, READ, IDENTIFIER;

// Non-terminals
non terminal program;
non terminal array_declaration;
non terminal param_declaration, func_name,func_parameters, arguments, evaluable, sec_arguments;
non terminal type, literal, func_call, unary_operator;
non terminal print, read, update;
non terminal array_assignment, index_assigment, assign_variable, assignments ;
non terminal relational_operator, comparison, logical_operator;
non terminal if_expr, log_arith_expression;
non terminal cases, switch_expressions, unary_operation, arith_operator, else_expr, optional_else , block, blocks;
non terminal func, functions,function_end, simple_operation, simple_expressions, array_access, optional_default;
non terminal while_expressions, for_expressions, initialization, decl_and_assign, compound_decl;



// Precedence (como vimos en clase, entre más abajo, mayor precedencia tienen)
precedence left ADD, SUBSTRACTION;
precedence left MULTIPLICATION, DIVISION, MODULO;
precedence right POWER;
precedence left DISJUNCTION;
precedence left CONJUNCTION;
precedence right NEGATION;
precedence left EQUALS, DIFFERENT;
precedence left LESSER, LESSER_EQUAL, GREATER, GREATER_EQUAL;
precedence right INCREMENT, DECREMENT;
start with program;


// Reglas de gramática
type ::= INTEGER    {: RESULT = "INT"; :}
    | FLOAT         {: RESULT = "FLOAT"; :}
    | BOOL          {: RESULT = "BOOL"; :}
    | CHAR          {: RESULT = "CHAR"; :}
    | STRING        {: RESULT = "STRING";:};

// se cambiaron los resultados de los literales para tener el mismo que los tipos
literal ::= LITERAL_INT:intLit  {:RESULT = "INT"; mipsGenerator.generateLoadImmediate(intLit.toString()); :}
    | LITERAL_FLOAT:fltlit      {: RESULT = "FLOAT"; mipsGenerator.generateLoadImmediate(fltlit.toString());  :}
    | LITERAL_BOOL:boolLit      {:RESULT = "BOOL"; mipsGenerator.generateLoadImmediate(boolLit.toString()); :}
    | LITERAL_CHAR:chrLit       {:RESULT = "CHAR"; mipsGenerator.generateLoadImmediate(chrLit.toString());:}
    | LITERAL_STRING:strLit {:RESULT = "STRING"; mipsGenerator.declareString(strLit.toString());:};

// funciones y llamados
func_name ::=
    MAIN {: RESULT = "_verano_";:}
    | IDENTIFIER:idFunc
        {:RESULT = idFunc;:};

func_call ::= func_name:f OPEN_PARENTHESIS arguments:arg CLOSE_PARENTHESIS
    {:
    // ya no hace falta llamar un método aparte para el tipo de funciones, integramos en uno solo el chequeo de tipos
    RESULT = symTable.getType(f.toString());
    int validationResult = symTable.checkFunctionCall(f.toString(), arg.toString());
    switch (validationResult) {
        case 0:
            // no se hace nada porque la llamada fue exitosa
            System.out.println("llamada exitosa");
            String[] args = arg.toString().split(":");
            mipsGenerator.generateFunctionCall(f.toString(), args);
            break;
        case 1:
            writeSemanticError("Error semantico: la funcion " + f + " no existe. [Fila: " + fleft + ", Col: " + fright + "]");
            break;
        case 2:
            writeSemanticError("Error semantico: no calza la cantidad de argumentos con los parametros definidos. [Fila: "
                + argleft + ", Col: " + argright + "]");
            break;
        case 3:
            writeSemanticError("Error semantico: uno o varios parámetros de " + f
                + " no coincide con el declarado. [Fila: " + argleft + ", Col: " + argright + "]");
            break;
    }:};

// funciones para imprimir y leer (predeterminadas)
read ::= READ OPEN_PARENTHESIS IDENTIFIER:id CLOSE_PARENTHESIS
    {:
        if(!symTable.isInsideLocalScope(id.toString())) {
            writeSemanticError("Error semantico: la variable donde se desea guardar el escaneo no esta en el scope. [Fila: "
                + idleft + ", Col: " + idright + "]");
        }
        if(id != null) {
            String readResult = mipsGenerator.generateRead();
            mipsGenerator.generateAssignment(id.toString(), readResult);
        }
    :};


print ::= PRINT OPEN_PARENTHESIS log_arith_expression:argExp CLOSE_PARENTHESIS
    {:
        mipsGenerator.generatePrint(argExp.toString());
    :};

// argumentos es para cuando se llama la función
arguments ::= sec_arguments:seq {:RESULT = seq;:}
            | {: RESULT = ""; :};
 // los argumentos pueden ser muchos, uno, o ninguno secuence op
evaluable ::= IDENTIFIER:id{:RESULT = id.toString();:}
              | literal:lit{:RESULT = lit;:}
              | func_call:call{:RESULT = call;:}
              | array_access:arrAcc{:RESULT = arrAcc;:};

sec_arguments ::= log_arith_expression:arg SEPARATOR sec_arguments:seq
        {:RESULT = arg + ":" + seq; :}
    | log_arith_expression:arg {:RESULT = arg; :};

// parámetros es para cuando se declara en vez de llamarse porque también deben llevar el tipo
param_declaration ::= type:t IDENTIFIER:id SEPARATOR param_declaration:par
            {:
            if (!symTable.addSymbolToScope(id.toString(), t + ":" + id)) {
                writeSemanticError("Error semantico: " + id + " es un parametro repetido. [Fila: " + idleft
                    + ", Col: " + idright);
            }
            RESULT = t + ":"  + par;
            :}
        | type:t IDENTIFIER:parId
            {:
            if(!symTable.addSymbolToScope(parId.toString(), t + ":" + parId)) {
                writeSemanticError("Error semantico: " + parId + " es un parametro repetido. [Fila: " + parIdleft
                    + ", Col: " + parIdright + "]");
            }
            RESULT = t.toString();
            :};


func_parameters ::= param_declaration:parDec {:RESULT = parDec;:}
                  | {: RESULT = ""; :};
 // los parámetros al declarar la función también pueden ser 0 o sea ()

func ::= type:t func_name:funcId OPEN_PARENTHESIS
        {:
        symTable.createScope(funcId.toString());
        symTable.currentFunction = funcId.toString();
        :} func_parameters:params CLOSE_PARENTHESIS {:symTable.addToGlobalIfAbsent(funcId.toString(), t + ":" + funcId + ":" + params);:}
        OPEN_BLOCK blocks CLOSE_BLOCK
        {:
            symTable.writeScope();
            symTable.popScope();
            symTable.currentFunction = "";
        :}
        | type:t func_name:funcName OPEN_PARENTHESIS {:symTable.createScope(funcName.toString());symTable.currentFunction = funcName.toString();:}
                error:err CLOSE_PARENTHESIS{:symTable.addToGlobalIfAbsent(funcName.toString(), t + ":" + funcName + ":error");:}
                OPEN_BLOCK blocks CLOSE_BLOCK
        {:
            System.out.println("Error en los parametros de la decl. de " + funcName + ":" + errleft + ", " + errright);
            symTable.writeScope();
            symTable.popScope();
            symTable.currentFunction = "";
        :};

functions ::= func | func functions | error:err {:System.out.println("Error fatal en la decl de una func: " + errleft + ", " + errright);:};

function_end ::=
    | RETURN:ret log_arith_expression:exp
     // envia (5 + 9) * _arr_[4]
     {:
         if(!symTable.getType(exp.toString()).equals(symTable.getType(symTable.currentFunction))) {
            System.out.println("tipo de la exp: " + symTable.getType(exp.toString()));
            System.out.println("Func actual: " + symTable.currentFunction);
            System.out.println("tipo de la func: " + symTable.getType(symTable.currentFunction));
             writeSemanticError("Error semantico en el tipo de retorno de función [Fila, Col: " + expleft + ", " + expright + "]");
         }
     :}
    | RETURN:ret {: writeSemanticError("Error semantico, el valor de retorno no coincide (no se permite retornar vacío). [Fila, "
        + retleft + ", Col: " + retright + "]"); :};

// operadores y operaciones
arith_operator ::= ADD {:RESULT = "+";:}
                   | SUBSTRACTION {:RESULT = "-"; :}
                   | MULTIPLICATION {:RESULT = "*";:}
                   | DIVISION {:RESULT = "/";:}
                   | MODULO{:RESULT = "%";:}
                   | POWER{:RESULT = "**";:};


unary_operator ::= INCREMENT {:RESULT = "++";:} | DECREMENT{:RESULT = "--";:};

logical_operator ::= CONJUNCTION {:RESULT = "AND";:} | DISJUNCTION {:RESULT = "OR";:};

relational_operator ::= LESSER_EQUAL {:RESULT = "<=";:}| GREATER_EQUAL {:RESULT = ">=";:}
        | LESSER {:RESULT = "<";:} | GREATER {:RESULT = ">";:} | EQUALS {:RESULT = "==";:}
        | DIFFERENT {:RESULT = "!=";:};


// expresiones/operaciones
unary_operation ::= IDENTIFIER:id unary_operator:uOp
        {:
        RESULT = id.toString();
        if (!symTable.isInsideLocalScope(id.toString())) {
            writeSemanticError("Error semantico en operacion unaria: el símbolo " + id.toString() +
                                " no se encuentra en este scope. " +
                                "[Fila: " + idleft + ", Columna: " + idright + "]");
        }

            mipsGenerator.generateUnaryOperation(id.toString(), uOp.toString());
        :};


log_arith_expression ::= NEGATION:not log_arith_expression:lalgexp
        {:RESULT = lalgexp.toString();
        mipsGenerator.generateLogicalNot(lalgexp.toString());
        :}
    | log_arith_expression:expr1 logical_operator:logOper log_arith_expression:expr2
        {:RESULT = expr1.toString();
        if (logOper.toString().equals("AND")) {
            mipsGenerator.generateLogicalAnd(expr1.toString(), expr2.toString());
        } else { // como no era un AND, la opcion restante es que sea un OR
            mipsGenerator.generateLogicalOr(expr1.toString(), expr2.toString());
        }
        :}

    | comparison:cmp
        {:RESULT = cmp;:}
    | OPEN_PARENTHESIS log_arith_expression:exp CLOSE_PARENTHESIS
        {:RESULT = exp.toString();:}; // esta última es la importante para cuando hay paréntesis entre operaciones

comparison ::= log_arith_expression:expr1 relational_operator:relOper log_arith_expression:expr2
    {:
    if(!symTable.isValidOperation(expr1.toString(), relOper.toString(), expr2.toString())) {
            writeSemanticError(
            "Error semantico al comparar tipos que no son compatibles o están fuera del scope. (operacion: " +
                relOper.toString() + ") [Fila: " + relOperleft + ", Columna: " + relOperright + "]");
        }
        RESULT = "BOOL";
    :}

    | unary_operation:uniOp
        {:RESULT = uniOp;:}

    | evaluable:ev
        {:
        RESULT = ev.toString();
        if (!symTable.isDataType(ev.toString()) && !symTable.isInsideLocalScope(ev.toString())) {
            writeSemanticError("Error semantico, identificador " + ev.toString() + " fuera del scope. [Fila, " + evleft
                + ", Columna: " + evright + "]");
        }
        :}

    | log_arith_expression:expr1 arith_operator:arithOper log_arith_expression:expr2
        {:
            if(!symTable.isValidOperation(expr1.toString(), arithOper.toString(), expr2.toString())) {
                writeSemanticError(
                            "Error semantico al operar tipos que no son compatibles o están fuera del scope. (operacion: " +
                                arithOper.toString() + ") [Fila: " + arithOperleft + ", Columna: " + arithOperright + "]");
            }
            RESULT = expr1.toString();
        :};

// operaciones de acceso y asignación
update ::= ASSIGN {:RESULT = "=";:} | arith_operator:op ASSIGN {:RESULT = op.toString() + "=";:}; // cuando algo se actualiza con un operador, e.g. +=, *=, -=

assign_variable ::= IDENTIFIER:id update:upd log_arith_expression:expr
    {:
        RESULT = id + ":" + upd + ":" + expr.toString();
            if(!symTable.checkType(id.toString(), expr.toString())) {
                writeSemanticError("Error semantico9: el tipo de " + id
                    + " no coincide con la expresión o hay un id fuera del scope [Fila: " + updleft + ", Columna: " + updright + "]");
            }:};


array_access ::= IDENTIFIER:id OPEN_BRACKET log_arith_expression:expr CLOSE_BRACKET
{:
    if(!symTable.isIntIndex(expr.toString())) {
        writeSemanticError("Error semantico: el tipo de dato de un índice debe ser entero. [Fila, " + exprleft + ", Columna: " + exprright + "]");
    }
    RESULT = id.toString();
:};




array_assignment ::= IDENTIFIER:id ASSIGN OPEN_BLOCK arguments:args CLOSE_BLOCK
{:
    RESULT = id + ":" + args;
    if(!symTable.checkArray(symTable.getType(id.toString()), args.toString())) {
        writeSemanticError("Error semantico Array: no coincide el tipo de " + id + "con el de la expresión asignada: " + args
            + ". [Fila: " + argsleft + ", Columna: " + argsright + "]");
    }
:};

index_assigment ::= array_access:array update:op log_arith_expression:expr
    {:
    RESULT = array.toString();
    if(!symTable.checkType(array.toString(), expr.toString())){
        writeSemanticError("Error semantico8: El tipo de una asignación no coincide o se usa un id fuera de scope. [Fila: " + opleft + ", Columna: " + opright + "]");
    }
    :};


assignments ::= index_assigment | assign_variable | array_assignment ; //diferentes posibles asignaciones para tomarlas como una expresión esta igual


array_declaration ::= ASSIGN OPEN_BLOCK sec_arguments:seq CLOSE_BLOCK {:RESULT = seq.toString();:} | {: RESULT = ""; :};

// como dice el nombre del no terminal, es para cuando se declara y asigna en la misma secuencia
decl_and_assign ::= type:t IDENTIFIER:id ASSIGN log_arith_expression:exp
    {:
    RESULT = t.toString();
    if(!symTable.addSymbolToScope(id.toString(), t.toString() + ":" + id)) {
        writeSemanticError("Error semantico10: la variable declarada " + id + " ya existe. [Fila: " + idleft
            + ", Col: " + idright + "]");
    }if(!symTable.checkType(t.toString(), exp.toString())) {
        writeSemanticError("Error semantico11: la declaracion no coincide en tipos o se usa un id fuera de scope. [Fila: "
            + idleft + ", Col:" + idright + "]");
    }
    :};

compound_decl ::= type:tipo IDENTIFIER:id
    {:RESULT = tipo.toString();
        if(!symTable.addSymbolToScope(id.toString(), tipo.toString() + ":" + id)) {
            writeSemanticError("Error semantico: el identificador " + id + " ya existe en este scope. [Fila: " + idleft
                + ", Col: " + idright + "]");
        }
    :}
    | decl_and_assign:dec {:RESULT = dec;:}

    | type:t array_access:arrAcc array_declaration:arrDec
    {: RESULT = t.toString();
    if(!symTable.addSymbolToScope(arrAcc.toString(), t.toString() + ":" + arrAcc.toString())) {
        writeSemanticError("Error semantico95: la declaracion de " + arrAcc + " no es posible pues ya hay "
            + " una en este scope. [Fila: " + arrAccleft + ", Col: " + arrAccright + "]");
    }if(!symTable.checkArray(t.toString(), arrDec.toString())) {
        writeSemanticError("Error en la declaracion de arreglo: el tipo de algun elemento no coincide o no esta en el scope."
            + " Fila: " + arrDecleft + ", Col: " +arrDecright);
    }:};


// condicionales y estructuras de control
if_expr ::= IF OPEN_PARENTHESIS log_arith_expression CLOSE_PARENTHESIS OPEN_BLOCK {:symTable.createScope(); :} blocks CLOSE_BLOCK  {: symTable.writeScope(); symTable.popScope(); :} optional_else
    | IF error {:RESULT = "error"; System.out.println("Error sintáctico en la definición de un for."); :} OPEN_BLOCK {: symTable.createScope(); :} blocks CLOSE_BLOCK {:symTable.writeScope(); symTable.popScope(); :};

else_expr ::= ELSE OPEN_BLOCK {:symTable.createScope("cond else"); :} blocks CLOSE_BLOCK {: symTable.writeScope(); symTable.popScope(); :}; // faltaba crear este scope

optional_else ::= else_expr
    | {: RESULT = "";:};


cases ::= CASE literal:lit COLON blocks cases
        {:
        //RESULT = lit + ":" + cs;
        String typeLit = symTable.getType(lit.toString());
        if(!typeLit.equals("CHAR") && !typeLit.equals("INT")) {
            writeSemanticError("Error semantico en case: el valor debe ser un literal tipo int o char [Fila: " + litleft
                + ", Col: " + litright + "]");
        }if (!symTable.switchDataType.equals(typeLit)) {
            writeSemanticError("Error semantico en case: el tipo no coincide con el de la expresion en el switch ("
                + symTable.switchDataType + "). [Fila: " + litleft + ", Col: " + litright + "]");
        }
        /*if(symTable.isDuplicateCase(lit.toString())) {
            writeSemanticError("Error semantico en case: no pueden existir valores duplicados: " + lit.toString()
                + ". [Fila: " + litleft + ", Col: " + litright + "]");
        }*/
        :}
    | CASE literal:lit COLON blocks
        {:
        RESULT = lit.toString();
/*        if(symTable.isDuplicateCase(lit.toString())) {
            writeSemanticError("Error semantico en case: no pueden existir valores duplicados: " + lit.toString()
                + ". [Fila: " + litleft + ", Col: " + litright + "]");
        }*/
        :}; // el default es opcional entonces se pone aparte en el switch

switch_expressions ::= SWITCH OPEN_PARENTHESIS log_arith_expression:expr CLOSE_PARENTHESIS OPEN_BLOCK
        {:
        symTable.switchDataType = symTable.getType(expr.toString());
        /*symTable.clearCaseValues();*/
        // si esta en el scope, entonces revisa que ademas sea de los 2 tipos que se puede hacer (int y char)
        if(!symTable.getType(expr.toString()).equals("INT") && !symTable.getType(expr.toString()).equals("CHAR")) {
            writeSemanticError("Error semantico en switch: el tipo de " + expr + " debe ser CHAR o INT y es: "
            + symTable.getType(expr.toString()) + ". [Fila: " + exprleft + ", Col: " + exprright + "]");
        }
        symTable.createScope("switch expr");
        :} cases:cs optional_default CLOSE_BLOCK {: symTable.writeScope(); symTable.popScope(); symTable.switchDataType = "";:}

    // caso para error sintactico
    | SWITCH error:err {:RESULT = "ERROR"; System.err.println("Error sintáctico en la definición de un switch. [" + errleft + ", " + errright + "]"); :}
        OPEN_BLOCK {: symTable.createScope("switch expr"); :} cases:cs  optional_default CLOSE_BLOCK{: symTable.writeScope(); symTable.popScope(); :};

optional_default ::= DEFAULT COLON blocks | ;


block ::= if_expr | while_expressions | for_expressions | simple_expressions END_EXPRESSION | switch_expressions;

blocks ::= block blocks | error {: System.out.println("ERROR dentro de bloque") ;  RESULT = "ERROR"; :} | ;


initialization ::= assign_variable:varAssign
        {:
        RESULT = varAssign;
        :}
    | IDENTIFIER:id {:RESULT = id;
         if(!symTable.isInsideLocalScope(id.toString())) {
                writeSemanticError("Error semantico: identificador " + id + " fuera del scope. [Fila, " + idleft + ", Columna: " + idright + "]");}:}
    | decl_and_assign:decAssign {:RESULT = decAssign;:};

simple_operation ::= unary_operation | decl_and_assign;

simple_expressions ::= unary_operation | compound_decl | assignments | read | print | BREAK | func_call | function_end | error {: RESULT = "Error"; System.err.println("Error sintáctico en la definición de una expresión simple."); :};


while_expressions ::= WHILE OPEN_PARENTHESIS log_arith_expression CLOSE_PARENTHESIS OPEN_BLOCK {:symTable.createScope(); :} blocks CLOSE_BLOCK {: symTable.writeScope(); symTable.popScope(); :}
    | WHILE error:err
        {:RESULT = "error";
        System.err.println("Error sintáctico en la definición de un while. [fila, col: " + errleft + ", " + errright + "]");
        :} OPEN_BLOCK {: symTable.createScope("ciclo while"); :} blocks CLOSE_BLOCK{: symTable.writeScope(); symTable.popScope(); :};


// en el for hay un caso especial, se debe crear su bloque interno desde el inicio porque se pueden declarar nuevas variables
for_expressions ::= FOR OPEN_PARENTHESIS {:symTable.createScope("ciclo for"); :} initialization SEPARATOR log_arith_expression SEPARATOR simple_operation CLOSE_PARENTHESIS OPEN_BLOCK blocks CLOSE_BLOCK {: symTable.writeScope(); symTable.popScope(); :}
    | FOR error:err
        {:RESULT = "error";
        System.err.println("Error sintáctico en la definición de un for. [fila, col: " + errleft + ", " + errright + "]");
        :} OPEN_BLOCK {: symTable.createScope("ciclo for"); :} blocks CLOSE_BLOCK {: symTable.writeScope(); symTable.popScope(); :};

program ::= functions {: System.out.println("Se parseó un archivo fuente."); symTable.writeGlobalScope();:}
         | {: System.out.println("Archivo fuente vacío."); RESULT = ""; :};
